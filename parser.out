Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> programa
Rule 2     programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque
Rule 3     var -> VAR varp
Rule 4     var -> empty
Rule 5     varp -> tipo COLON ID varppp varpp SEMICOLON varpppp
Rule 6     varpp -> COMMA ID varppp varpp
Rule 7     varpp -> empty
Rule 8     varppp -> dimDeclare
Rule 9     varppp -> dimDeclare dimDeclare
Rule 10    varppp -> empty
Rule 11    varpppp -> varp
Rule 12    varpppp -> empty
Rule 13    dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
Rule 14    tipo -> INT
Rule 15    tipo -> FLOAT
Rule 16    tipo -> CHAR
Rule 17    funcion -> FUNCION funcionp
Rule 18    funcion -> empty
Rule 19    funcionp -> tipoRetorno ID L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion
Rule 20    parametro -> tipo ID parametrop
Rule 21    parametro -> empty
Rule 22    parametrop -> COMMA tipo ID parametrop
Rule 23    parametrop -> empty
Rule 24    tipoRetorno -> tipo
Rule 25    tipoRetorno -> VOID
Rule 26    bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET
Rule 27    bloquep -> estatuto bloquep
Rule 28    bloquep -> empty
Rule 29    estatuto -> asignacion
Rule 30    estatuto -> funcionVacia
Rule 31    estatuto -> regresa
Rule 32    estatuto -> lectura
Rule 33    estatuto -> escritura
Rule 34    estatuto -> decision
Rule 35    estatuto -> cicloCondicional
Rule 36    estatuto -> cicloNoCondicional
Rule 37    asignacion -> ID dimId ASSIGN expresion SEMICOLON
Rule 38    dimId -> dim
Rule 39    dimId -> dim dim
Rule 40    dimId -> empty
Rule 41    dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
Rule 42    expresion -> relacional expresionp
Rule 43    expresion -> NOT relacional expresionp
Rule 44    expresionp -> AND expresion
Rule 45    expresionp -> OR expresion
Rule 46    expresionp -> empty
Rule 47    relacional -> aritmetica relacionalp
Rule 48    relacionalp -> EQUALS relacional
Rule 49    relacionalp -> NOT_EQUAL relacional
Rule 50    relacionalp -> LESS_THAN relacional
Rule 51    relacionalp -> LESS_THAN_EQUAL relacional
Rule 52    relacionalp -> GREATER_THAN relacional
Rule 53    relacionalp -> GREATER_THAN_EQUAL relacional
Rule 54    relacionalp -> empty
Rule 55    aritmetica -> factor aritmeticap
Rule 56    aritmeticap -> SUM aritmetica
Rule 57    aritmeticap -> SUBTRACT aritmetica
Rule 58    aritmeticap -> empty
Rule 59    factor -> matriz factorp
Rule 60    factorp -> MULTIPLY factor
Rule 61    factorp -> DIVIDE factor
Rule 62    factorp -> empty
Rule 63    matriz -> cte matrizp
Rule 64    matrizp -> DETERMINANT
Rule 65    matrizp -> TRANSPOSED
Rule 66    matrizp -> INVERSE
Rule 67    matrizp -> empty
Rule 68    cte -> CTE_INT
Rule 69    cte -> CTE_FLOAT
Rule 70    cte -> CTE_CHAR
Rule 71    cte -> llamadaFuncion
Rule 72    cte -> ID dimId
Rule 73    cte -> L_PARENTHESIS expresion R_PARENTHESIS
Rule 74    llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS
Rule 75    funcionVacia -> ID L_PARENTHESIS parametro R_PARENTHESIS SEMICOLON
Rule 76    regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
Rule 77    lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
Rule 78    lecturap -> ID dimId lecturapp
Rule 79    lecturapp -> COMMA lecturap
Rule 80    lecturapp -> empty
Rule 81    escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
Rule 82    escriturap -> LETRERO escriturapp
Rule 83    escriturap -> expresion escriturapp
Rule 84    escriturapp -> COMMA escriturap
Rule 85    escriturapp -> empty
Rule 86    decision -> SI L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque decisionp
Rule 87    decisionp -> SINO bloque
Rule 88    decisionp -> empty
Rule 89    cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque
Rule 90    cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque
Rule 91    empty -> <empty>

Terminals, with rules where they appear

AND                  : 44
ASSIGN               : 37 90
CHAR                 : 16
COLON                : 5
COMMA                : 6 22 79 84
CTE_CHAR             : 70
CTE_FLOAT            : 69
CTE_INT              : 13 68
DESDE                : 90
DETERMINANT          : 64
DIVIDE               : 61
EQUALS               : 48
ESCRIBE              : 81
FLOAT                : 15
FUNCION              : 17
GREATER_THAN         : 52
GREATER_THAN_EQUAL   : 53
HACER                : 90
HASTA                : 90
HAZ                  : 86 89
ID                   : 2 5 6 19 20 22 37 72 74 75 78 90
INT                  : 14
INVERSE              : 66
LECTURA              : 77
LESS_THAN            : 50
LESS_THAN_EQUAL      : 51
LETRERO              : 82
L_CURLY_BRACKET      : 26
L_PARENTHESIS        : 2 19 73 74 75 76 77 81 86 89
L_SQUARE_BRACKET     : 13 41
MIENTRAS             : 89
MULTIPLY             : 60
NOT                  : 43
NOT_EQUAL            : 49
OR                   : 45
PRINCIPAL            : 2
PROGRAMA             : 2
REGRESA              : 76
R_CURLY_BRACKET      : 26
R_PARENTHESIS        : 2 19 73 74 75 76 77 81 86 89
R_SQUARE_BRACKET     : 13 41
SEMICOLON            : 2 5 37 75 76 77 81
SI                   : 86
SINO                 : 87
SUBTRACT             : 57
SUM                  : 56
TRANSPOSED           : 65
VAR                  : 3
VOID                 : 25
error                : 

Nonterminals, with rules where they appear

aritmetica           : 47 56 57
aritmeticap          : 55
asignacion           : 29
bloque               : 2 19 86 87 89 90
bloquep              : 26 27
cicloCondicional     : 35
cicloNoCondicional   : 36
cte                  : 63
decision             : 34
decisionp            : 86
dim                  : 38 39 39
dimDeclare           : 8 9 9
dimId                : 37 72 78 90
empty                : 4 7 10 12 18 21 23 28 40 46 54 58 62 67 80 85 88
escritura            : 33
escriturap           : 81 84
escriturapp          : 82 83
estatuto             : 27
expresion            : 37 41 44 45 73 76 83 86 89 90 90
expresionp           : 42 43
factor               : 55 60 61
factorp              : 59
funcion              : 2 19
funcionVacia         : 30
funcionp             : 17
lectura              : 32
lecturap             : 77 79
lecturapp            : 78
llamadaFuncion       : 71
matriz               : 59
matrizp              : 63
parametro            : 19 74 75
parametrop           : 20 22
programa             : 1
regresa              : 31
relacional           : 42 43 48 49 50 51 52 53
relacionalp          : 47
start                : 0
tipo                 : 5 20 22 24
tipoRetorno          : 19
var                  : 2 19
varp                 : 3 11
varpp                : 5 6
varppp               : 5 6
varpppp              : 5

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . programa
    (2) programa -> . PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque

    PROGRAMA        shift and go to state 3

    start                          shift and go to state 1
    programa                       shift and go to state 2

state 1

    (0) S' -> start .



state 2

    (1) start -> programa .

    $end            reduce using rule 1 (start -> programa .)


state 3

    (2) programa -> PROGRAMA . ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque

    ID              shift and go to state 4


state 4

    (2) programa -> PROGRAMA ID . SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque

    SEMICOLON       shift and go to state 5


state 5

    (2) programa -> PROGRAMA ID SEMICOLON . var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque
    (3) var -> . VAR varp
    (4) var -> . empty
    (91) empty -> .

    VAR             shift and go to state 7
    FUNCION         reduce using rule 91 (empty -> .)
    PRINCIPAL       reduce using rule 91 (empty -> .)

    var                            shift and go to state 6
    empty                          shift and go to state 8

state 6

    (2) programa -> PROGRAMA ID SEMICOLON var . funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque
    (17) funcion -> . FUNCION funcionp
    (18) funcion -> . empty
    (91) empty -> .

    FUNCION         shift and go to state 10
    PRINCIPAL       reduce using rule 91 (empty -> .)

    funcion                        shift and go to state 9
    empty                          shift and go to state 11

state 7

    (3) var -> VAR . varp
    (5) varp -> . tipo COLON ID varppp varpp SEMICOLON varpppp
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    varp                           shift and go to state 12
    tipo                           shift and go to state 13

state 8

    (4) var -> empty .

    FUNCION         reduce using rule 4 (var -> empty .)
    PRINCIPAL       reduce using rule 4 (var -> empty .)
    L_CURLY_BRACKET reduce using rule 4 (var -> empty .)


state 9

    (2) programa -> PROGRAMA ID SEMICOLON var funcion . PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque

    PRINCIPAL       shift and go to state 17


state 10

    (17) funcion -> FUNCION . funcionp
    (19) funcionp -> . tipoRetorno ID L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion
    (24) tipoRetorno -> . tipo
    (25) tipoRetorno -> . VOID
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . CHAR

    VOID            shift and go to state 21
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    funcionp                       shift and go to state 18
    tipoRetorno                    shift and go to state 19
    tipo                           shift and go to state 20

state 11

    (18) funcion -> empty .

    PRINCIPAL       reduce using rule 18 (funcion -> empty .)


state 12

    (3) var -> VAR varp .

    FUNCION         reduce using rule 3 (var -> VAR varp .)
    PRINCIPAL       reduce using rule 3 (var -> VAR varp .)
    L_CURLY_BRACKET reduce using rule 3 (var -> VAR varp .)


state 13

    (5) varp -> tipo . COLON ID varppp varpp SEMICOLON varpppp

    COLON           shift and go to state 22


state 14

    (14) tipo -> INT .

    COLON           reduce using rule 14 (tipo -> INT .)
    ID              reduce using rule 14 (tipo -> INT .)


state 15

    (15) tipo -> FLOAT .

    COLON           reduce using rule 15 (tipo -> FLOAT .)
    ID              reduce using rule 15 (tipo -> FLOAT .)


state 16

    (16) tipo -> CHAR .

    COLON           reduce using rule 16 (tipo -> CHAR .)
    ID              reduce using rule 16 (tipo -> CHAR .)


state 17

    (2) programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL . L_PARENTHESIS R_PARENTHESIS bloque

    L_PARENTHESIS   shift and go to state 23


state 18

    (17) funcion -> FUNCION funcionp .

    PRINCIPAL       reduce using rule 17 (funcion -> FUNCION funcionp .)


state 19

    (19) funcionp -> tipoRetorno . ID L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion

    ID              shift and go to state 24


state 20

    (24) tipoRetorno -> tipo .

    ID              reduce using rule 24 (tipoRetorno -> tipo .)


state 21

    (25) tipoRetorno -> VOID .

    ID              reduce using rule 25 (tipoRetorno -> VOID .)


state 22

    (5) varp -> tipo COLON . ID varppp varpp SEMICOLON varpppp

    ID              shift and go to state 25


state 23

    (2) programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS . R_PARENTHESIS bloque

    R_PARENTHESIS   shift and go to state 26


state 24

    (19) funcionp -> tipoRetorno ID . L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion

    L_PARENTHESIS   shift and go to state 27


state 25

    (5) varp -> tipo COLON ID . varppp varpp SEMICOLON varpppp
    (8) varppp -> . dimDeclare
    (9) varppp -> . dimDeclare dimDeclare
    (10) varppp -> . empty
    (13) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (91) empty -> .

    L_SQUARE_BRACKET shift and go to state 31
    COMMA           reduce using rule 91 (empty -> .)
    SEMICOLON       reduce using rule 91 (empty -> .)

    varppp                         shift and go to state 28
    dimDeclare                     shift and go to state 29
    empty                          shift and go to state 30

state 26

    (2) programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS . bloque
    (26) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 33

    bloque                         shift and go to state 32

state 27

    (19) funcionp -> tipoRetorno ID L_PARENTHESIS . parametro R_PARENTHESIS var bloque funcion
    (20) parametro -> . tipo ID parametrop
    (21) parametro -> . empty
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . CHAR
    (91) empty -> .

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16
    R_PARENTHESIS   reduce using rule 91 (empty -> .)

    parametro                      shift and go to state 34
    tipo                           shift and go to state 35
    empty                          shift and go to state 36

state 28

    (5) varp -> tipo COLON ID varppp . varpp SEMICOLON varpppp
    (6) varpp -> . COMMA ID varppp varpp
    (7) varpp -> . empty
    (91) empty -> .

    COMMA           shift and go to state 38
    SEMICOLON       reduce using rule 91 (empty -> .)

    varpp                          shift and go to state 37
    empty                          shift and go to state 39

state 29

    (8) varppp -> dimDeclare .
    (9) varppp -> dimDeclare . dimDeclare
    (13) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET

    COMMA           reduce using rule 8 (varppp -> dimDeclare .)
    SEMICOLON       reduce using rule 8 (varppp -> dimDeclare .)
    L_SQUARE_BRACKET shift and go to state 31

    dimDeclare                     shift and go to state 40

state 30

    (10) varppp -> empty .

    COMMA           reduce using rule 10 (varppp -> empty .)
    SEMICOLON       reduce using rule 10 (varppp -> empty .)


state 31

    (13) dimDeclare -> L_SQUARE_BRACKET . CTE_INT R_SQUARE_BRACKET

    CTE_INT         shift and go to state 41


state 32

    (2) programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque .

    $end            reduce using rule 2 (programa -> PROGRAMA ID SEMICOLON var funcion PRINCIPAL L_PARENTHESIS R_PARENTHESIS bloque .)


state 33

    (26) bloque -> L_CURLY_BRACKET . bloquep R_CURLY_BRACKET
    (27) bloquep -> . estatuto bloquep
    (28) bloquep -> . empty
    (29) estatuto -> . asignacion
    (30) estatuto -> . funcionVacia
    (31) estatuto -> . regresa
    (32) estatuto -> . lectura
    (33) estatuto -> . escritura
    (34) estatuto -> . decision
    (35) estatuto -> . cicloCondicional
    (36) estatuto -> . cicloNoCondicional
    (91) empty -> .
    (37) asignacion -> . ID dimId ASSIGN expresion SEMICOLON
    (75) funcionVacia -> . ID L_PARENTHESIS parametro R_PARENTHESIS SEMICOLON
    (76) regresa -> . REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
    (77) lectura -> . LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
    (81) escritura -> . ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
    (86) decision -> . SI L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque decisionp
    (89) cicloCondicional -> . MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque
    (90) cicloNoCondicional -> . DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque

    R_CURLY_BRACKET reduce using rule 91 (empty -> .)
    ID              shift and go to state 53
    REGRESA         shift and go to state 54
    LECTURA         shift and go to state 55
    ESCRIBE         shift and go to state 56
    SI              shift and go to state 57
    MIENTRAS        shift and go to state 58
    DESDE           shift and go to state 59

    bloquep                        shift and go to state 42
    estatuto                       shift and go to state 43
    empty                          shift and go to state 44
    asignacion                     shift and go to state 45
    funcionVacia                   shift and go to state 46
    regresa                        shift and go to state 47
    lectura                        shift and go to state 48
    escritura                      shift and go to state 49
    decision                       shift and go to state 50
    cicloCondicional               shift and go to state 51
    cicloNoCondicional             shift and go to state 52

state 34

    (19) funcionp -> tipoRetorno ID L_PARENTHESIS parametro . R_PARENTHESIS var bloque funcion

    R_PARENTHESIS   shift and go to state 60


state 35

    (20) parametro -> tipo . ID parametrop

    ID              shift and go to state 61


state 36

    (21) parametro -> empty .

    R_PARENTHESIS   reduce using rule 21 (parametro -> empty .)


state 37

    (5) varp -> tipo COLON ID varppp varpp . SEMICOLON varpppp

    SEMICOLON       shift and go to state 62


state 38

    (6) varpp -> COMMA . ID varppp varpp

    ID              shift and go to state 63


state 39

    (7) varpp -> empty .

    SEMICOLON       reduce using rule 7 (varpp -> empty .)


state 40

    (9) varppp -> dimDeclare dimDeclare .

    COMMA           reduce using rule 9 (varppp -> dimDeclare dimDeclare .)
    SEMICOLON       reduce using rule 9 (varppp -> dimDeclare dimDeclare .)


state 41

    (13) dimDeclare -> L_SQUARE_BRACKET CTE_INT . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 64


state 42

    (26) bloque -> L_CURLY_BRACKET bloquep . R_CURLY_BRACKET

    R_CURLY_BRACKET shift and go to state 65


state 43

    (27) bloquep -> estatuto . bloquep
    (27) bloquep -> . estatuto bloquep
    (28) bloquep -> . empty
    (29) estatuto -> . asignacion
    (30) estatuto -> . funcionVacia
    (31) estatuto -> . regresa
    (32) estatuto -> . lectura
    (33) estatuto -> . escritura
    (34) estatuto -> . decision
    (35) estatuto -> . cicloCondicional
    (36) estatuto -> . cicloNoCondicional
    (91) empty -> .
    (37) asignacion -> . ID dimId ASSIGN expresion SEMICOLON
    (75) funcionVacia -> . ID L_PARENTHESIS parametro R_PARENTHESIS SEMICOLON
    (76) regresa -> . REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON
    (77) lectura -> . LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON
    (81) escritura -> . ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON
    (86) decision -> . SI L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque decisionp
    (89) cicloCondicional -> . MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque
    (90) cicloNoCondicional -> . DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque

    R_CURLY_BRACKET reduce using rule 91 (empty -> .)
    ID              shift and go to state 53
    REGRESA         shift and go to state 54
    LECTURA         shift and go to state 55
    ESCRIBE         shift and go to state 56
    SI              shift and go to state 57
    MIENTRAS        shift and go to state 58
    DESDE           shift and go to state 59

    estatuto                       shift and go to state 43
    bloquep                        shift and go to state 66
    empty                          shift and go to state 44
    asignacion                     shift and go to state 45
    funcionVacia                   shift and go to state 46
    regresa                        shift and go to state 47
    lectura                        shift and go to state 48
    escritura                      shift and go to state 49
    decision                       shift and go to state 50
    cicloCondicional               shift and go to state 51
    cicloNoCondicional             shift and go to state 52

state 44

    (28) bloquep -> empty .

    R_CURLY_BRACKET reduce using rule 28 (bloquep -> empty .)


state 45

    (29) estatuto -> asignacion .

    ID              reduce using rule 29 (estatuto -> asignacion .)
    REGRESA         reduce using rule 29 (estatuto -> asignacion .)
    LECTURA         reduce using rule 29 (estatuto -> asignacion .)
    ESCRIBE         reduce using rule 29 (estatuto -> asignacion .)
    SI              reduce using rule 29 (estatuto -> asignacion .)
    MIENTRAS        reduce using rule 29 (estatuto -> asignacion .)
    DESDE           reduce using rule 29 (estatuto -> asignacion .)
    R_CURLY_BRACKET reduce using rule 29 (estatuto -> asignacion .)


state 46

    (30) estatuto -> funcionVacia .

    ID              reduce using rule 30 (estatuto -> funcionVacia .)
    REGRESA         reduce using rule 30 (estatuto -> funcionVacia .)
    LECTURA         reduce using rule 30 (estatuto -> funcionVacia .)
    ESCRIBE         reduce using rule 30 (estatuto -> funcionVacia .)
    SI              reduce using rule 30 (estatuto -> funcionVacia .)
    MIENTRAS        reduce using rule 30 (estatuto -> funcionVacia .)
    DESDE           reduce using rule 30 (estatuto -> funcionVacia .)
    R_CURLY_BRACKET reduce using rule 30 (estatuto -> funcionVacia .)


state 47

    (31) estatuto -> regresa .

    ID              reduce using rule 31 (estatuto -> regresa .)
    REGRESA         reduce using rule 31 (estatuto -> regresa .)
    LECTURA         reduce using rule 31 (estatuto -> regresa .)
    ESCRIBE         reduce using rule 31 (estatuto -> regresa .)
    SI              reduce using rule 31 (estatuto -> regresa .)
    MIENTRAS        reduce using rule 31 (estatuto -> regresa .)
    DESDE           reduce using rule 31 (estatuto -> regresa .)
    R_CURLY_BRACKET reduce using rule 31 (estatuto -> regresa .)


state 48

    (32) estatuto -> lectura .

    ID              reduce using rule 32 (estatuto -> lectura .)
    REGRESA         reduce using rule 32 (estatuto -> lectura .)
    LECTURA         reduce using rule 32 (estatuto -> lectura .)
    ESCRIBE         reduce using rule 32 (estatuto -> lectura .)
    SI              reduce using rule 32 (estatuto -> lectura .)
    MIENTRAS        reduce using rule 32 (estatuto -> lectura .)
    DESDE           reduce using rule 32 (estatuto -> lectura .)
    R_CURLY_BRACKET reduce using rule 32 (estatuto -> lectura .)


state 49

    (33) estatuto -> escritura .

    ID              reduce using rule 33 (estatuto -> escritura .)
    REGRESA         reduce using rule 33 (estatuto -> escritura .)
    LECTURA         reduce using rule 33 (estatuto -> escritura .)
    ESCRIBE         reduce using rule 33 (estatuto -> escritura .)
    SI              reduce using rule 33 (estatuto -> escritura .)
    MIENTRAS        reduce using rule 33 (estatuto -> escritura .)
    DESDE           reduce using rule 33 (estatuto -> escritura .)
    R_CURLY_BRACKET reduce using rule 33 (estatuto -> escritura .)


state 50

    (34) estatuto -> decision .

    ID              reduce using rule 34 (estatuto -> decision .)
    REGRESA         reduce using rule 34 (estatuto -> decision .)
    LECTURA         reduce using rule 34 (estatuto -> decision .)
    ESCRIBE         reduce using rule 34 (estatuto -> decision .)
    SI              reduce using rule 34 (estatuto -> decision .)
    MIENTRAS        reduce using rule 34 (estatuto -> decision .)
    DESDE           reduce using rule 34 (estatuto -> decision .)
    R_CURLY_BRACKET reduce using rule 34 (estatuto -> decision .)


state 51

    (35) estatuto -> cicloCondicional .

    ID              reduce using rule 35 (estatuto -> cicloCondicional .)
    REGRESA         reduce using rule 35 (estatuto -> cicloCondicional .)
    LECTURA         reduce using rule 35 (estatuto -> cicloCondicional .)
    ESCRIBE         reduce using rule 35 (estatuto -> cicloCondicional .)
    SI              reduce using rule 35 (estatuto -> cicloCondicional .)
    MIENTRAS        reduce using rule 35 (estatuto -> cicloCondicional .)
    DESDE           reduce using rule 35 (estatuto -> cicloCondicional .)
    R_CURLY_BRACKET reduce using rule 35 (estatuto -> cicloCondicional .)


state 52

    (36) estatuto -> cicloNoCondicional .

    ID              reduce using rule 36 (estatuto -> cicloNoCondicional .)
    REGRESA         reduce using rule 36 (estatuto -> cicloNoCondicional .)
    LECTURA         reduce using rule 36 (estatuto -> cicloNoCondicional .)
    ESCRIBE         reduce using rule 36 (estatuto -> cicloNoCondicional .)
    SI              reduce using rule 36 (estatuto -> cicloNoCondicional .)
    MIENTRAS        reduce using rule 36 (estatuto -> cicloNoCondicional .)
    DESDE           reduce using rule 36 (estatuto -> cicloNoCondicional .)
    R_CURLY_BRACKET reduce using rule 36 (estatuto -> cicloNoCondicional .)


state 53

    (37) asignacion -> ID . dimId ASSIGN expresion SEMICOLON
    (75) funcionVacia -> ID . L_PARENTHESIS parametro R_PARENTHESIS SEMICOLON
    (38) dimId -> . dim
    (39) dimId -> . dim dim
    (40) dimId -> . empty
    (41) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (91) empty -> .

    L_PARENTHESIS   shift and go to state 68
    L_SQUARE_BRACKET shift and go to state 71
    ASSIGN          reduce using rule 91 (empty -> .)

    dimId                          shift and go to state 67
    dim                            shift and go to state 69
    empty                          shift and go to state 70

state 54

    (76) regresa -> REGRESA . L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 72


state 55

    (77) lectura -> LECTURA . L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 73


state 56

    (81) escritura -> ESCRIBE . L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON

    L_PARENTHESIS   shift and go to state 74


state 57

    (86) decision -> SI . L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque decisionp

    L_PARENTHESIS   shift and go to state 75


state 58

    (89) cicloCondicional -> MIENTRAS . L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque

    L_PARENTHESIS   shift and go to state 76


state 59

    (90) cicloNoCondicional -> DESDE . ID dimId ASSIGN expresion HASTA expresion HACER bloque

    ID              shift and go to state 77


state 60

    (19) funcionp -> tipoRetorno ID L_PARENTHESIS parametro R_PARENTHESIS . var bloque funcion
    (3) var -> . VAR varp
    (4) var -> . empty
    (91) empty -> .

    VAR             shift and go to state 7
    L_CURLY_BRACKET reduce using rule 91 (empty -> .)

    var                            shift and go to state 78
    empty                          shift and go to state 8

state 61

    (20) parametro -> tipo ID . parametrop
    (22) parametrop -> . COMMA tipo ID parametrop
    (23) parametrop -> . empty
    (91) empty -> .

    COMMA           shift and go to state 80
    R_PARENTHESIS   reduce using rule 91 (empty -> .)

    parametrop                     shift and go to state 79
    empty                          shift and go to state 81

state 62

    (5) varp -> tipo COLON ID varppp varpp SEMICOLON . varpppp
    (11) varpppp -> . varp
    (12) varpppp -> . empty
    (5) varp -> . tipo COLON ID varppp varpp SEMICOLON varpppp
    (91) empty -> .
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . CHAR

    FUNCION         reduce using rule 91 (empty -> .)
    PRINCIPAL       reduce using rule 91 (empty -> .)
    L_CURLY_BRACKET reduce using rule 91 (empty -> .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    tipo                           shift and go to state 13
    varpppp                        shift and go to state 82
    varp                           shift and go to state 83
    empty                          shift and go to state 84

state 63

    (6) varpp -> COMMA ID . varppp varpp
    (8) varppp -> . dimDeclare
    (9) varppp -> . dimDeclare dimDeclare
    (10) varppp -> . empty
    (13) dimDeclare -> . L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET
    (91) empty -> .

    L_SQUARE_BRACKET shift and go to state 31
    COMMA           reduce using rule 91 (empty -> .)
    SEMICOLON       reduce using rule 91 (empty -> .)

    varppp                         shift and go to state 85
    dimDeclare                     shift and go to state 29
    empty                          shift and go to state 30

state 64

    (13) dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .

    L_SQUARE_BRACKET reduce using rule 13 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)
    COMMA           reduce using rule 13 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 13 (dimDeclare -> L_SQUARE_BRACKET CTE_INT R_SQUARE_BRACKET .)


state 65

    (26) bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .

    $end            reduce using rule 26 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    FUNCION         reduce using rule 26 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    PRINCIPAL       reduce using rule 26 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    SINO            reduce using rule 26 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    ID              reduce using rule 26 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    REGRESA         reduce using rule 26 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    LECTURA         reduce using rule 26 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    ESCRIBE         reduce using rule 26 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    SI              reduce using rule 26 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    MIENTRAS        reduce using rule 26 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    DESDE           reduce using rule 26 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)
    R_CURLY_BRACKET reduce using rule 26 (bloque -> L_CURLY_BRACKET bloquep R_CURLY_BRACKET .)


state 66

    (27) bloquep -> estatuto bloquep .

    R_CURLY_BRACKET reduce using rule 27 (bloquep -> estatuto bloquep .)


state 67

    (37) asignacion -> ID dimId . ASSIGN expresion SEMICOLON

    ASSIGN          shift and go to state 86


state 68

    (75) funcionVacia -> ID L_PARENTHESIS . parametro R_PARENTHESIS SEMICOLON
    (20) parametro -> . tipo ID parametrop
    (21) parametro -> . empty
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . CHAR
    (91) empty -> .

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16
    R_PARENTHESIS   reduce using rule 91 (empty -> .)

    parametro                      shift and go to state 87
    tipo                           shift and go to state 35
    empty                          shift and go to state 36

state 69

    (38) dimId -> dim .
    (39) dimId -> dim . dim
    (41) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET

    ASSIGN          reduce using rule 38 (dimId -> dim .)
    DETERMINANT     reduce using rule 38 (dimId -> dim .)
    TRANSPOSED      reduce using rule 38 (dimId -> dim .)
    INVERSE         reduce using rule 38 (dimId -> dim .)
    MULTIPLY        reduce using rule 38 (dimId -> dim .)
    DIVIDE          reduce using rule 38 (dimId -> dim .)
    SUM             reduce using rule 38 (dimId -> dim .)
    SUBTRACT        reduce using rule 38 (dimId -> dim .)
    EQUALS          reduce using rule 38 (dimId -> dim .)
    NOT_EQUAL       reduce using rule 38 (dimId -> dim .)
    LESS_THAN       reduce using rule 38 (dimId -> dim .)
    LESS_THAN_EQUAL reduce using rule 38 (dimId -> dim .)
    GREATER_THAN    reduce using rule 38 (dimId -> dim .)
    GREATER_THAN_EQUAL reduce using rule 38 (dimId -> dim .)
    AND             reduce using rule 38 (dimId -> dim .)
    OR              reduce using rule 38 (dimId -> dim .)
    R_SQUARE_BRACKET reduce using rule 38 (dimId -> dim .)
    R_PARENTHESIS   reduce using rule 38 (dimId -> dim .)
    COMMA           reduce using rule 38 (dimId -> dim .)
    SEMICOLON       reduce using rule 38 (dimId -> dim .)
    HASTA           reduce using rule 38 (dimId -> dim .)
    HACER           reduce using rule 38 (dimId -> dim .)
    L_SQUARE_BRACKET shift and go to state 71

    dim                            shift and go to state 88

state 70

    (40) dimId -> empty .

    ASSIGN          reduce using rule 40 (dimId -> empty .)
    DETERMINANT     reduce using rule 40 (dimId -> empty .)
    TRANSPOSED      reduce using rule 40 (dimId -> empty .)
    INVERSE         reduce using rule 40 (dimId -> empty .)
    MULTIPLY        reduce using rule 40 (dimId -> empty .)
    DIVIDE          reduce using rule 40 (dimId -> empty .)
    SUM             reduce using rule 40 (dimId -> empty .)
    SUBTRACT        reduce using rule 40 (dimId -> empty .)
    EQUALS          reduce using rule 40 (dimId -> empty .)
    NOT_EQUAL       reduce using rule 40 (dimId -> empty .)
    LESS_THAN       reduce using rule 40 (dimId -> empty .)
    LESS_THAN_EQUAL reduce using rule 40 (dimId -> empty .)
    GREATER_THAN    reduce using rule 40 (dimId -> empty .)
    GREATER_THAN_EQUAL reduce using rule 40 (dimId -> empty .)
    AND             reduce using rule 40 (dimId -> empty .)
    OR              reduce using rule 40 (dimId -> empty .)
    R_SQUARE_BRACKET reduce using rule 40 (dimId -> empty .)
    R_PARENTHESIS   reduce using rule 40 (dimId -> empty .)
    COMMA           reduce using rule 40 (dimId -> empty .)
    SEMICOLON       reduce using rule 40 (dimId -> empty .)
    HASTA           reduce using rule 40 (dimId -> empty .)
    HACER           reduce using rule 40 (dimId -> empty .)


state 71

    (41) dim -> L_SQUARE_BRACKET . expresion R_SQUARE_BRACKET
    (42) expresion -> . relacional expresionp
    (43) expresion -> . NOT relacional expresionp
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    NOT             shift and go to state 91
    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    expresion                      shift and go to state 89
    relacional                     shift and go to state 90
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 72

    (76) regresa -> REGRESA L_PARENTHESIS . expresion R_PARENTHESIS SEMICOLON
    (42) expresion -> . relacional expresionp
    (43) expresion -> . NOT relacional expresionp
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    NOT             shift and go to state 91
    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    expresion                      shift and go to state 102
    relacional                     shift and go to state 90
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 73

    (77) lectura -> LECTURA L_PARENTHESIS . lecturap R_PARENTHESIS SEMICOLON
    (78) lecturap -> . ID dimId lecturapp

    ID              shift and go to state 104

    lecturap                       shift and go to state 103

state 74

    (81) escritura -> ESCRIBE L_PARENTHESIS . escriturap R_PARENTHESIS SEMICOLON
    (82) escriturap -> . LETRERO escriturapp
    (83) escriturap -> . expresion escriturapp
    (42) expresion -> . relacional expresionp
    (43) expresion -> . NOT relacional expresionp
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    LETRERO         shift and go to state 106
    NOT             shift and go to state 91
    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    escriturap                     shift and go to state 105
    expresion                      shift and go to state 107
    relacional                     shift and go to state 90
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 75

    (86) decision -> SI L_PARENTHESIS . expresion R_PARENTHESIS HAZ bloque decisionp
    (42) expresion -> . relacional expresionp
    (43) expresion -> . NOT relacional expresionp
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    NOT             shift and go to state 91
    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    expresion                      shift and go to state 108
    relacional                     shift and go to state 90
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 76

    (89) cicloCondicional -> MIENTRAS L_PARENTHESIS . expresion R_PARENTHESIS HAZ bloque
    (42) expresion -> . relacional expresionp
    (43) expresion -> . NOT relacional expresionp
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    NOT             shift and go to state 91
    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    expresion                      shift and go to state 109
    relacional                     shift and go to state 90
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 77

    (90) cicloNoCondicional -> DESDE ID . dimId ASSIGN expresion HASTA expresion HACER bloque
    (38) dimId -> . dim
    (39) dimId -> . dim dim
    (40) dimId -> . empty
    (41) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (91) empty -> .

    L_SQUARE_BRACKET shift and go to state 71
    ASSIGN          reduce using rule 91 (empty -> .)

    dimId                          shift and go to state 110
    dim                            shift and go to state 69
    empty                          shift and go to state 70

state 78

    (19) funcionp -> tipoRetorno ID L_PARENTHESIS parametro R_PARENTHESIS var . bloque funcion
    (26) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 33

    bloque                         shift and go to state 111

state 79

    (20) parametro -> tipo ID parametrop .

    R_PARENTHESIS   reduce using rule 20 (parametro -> tipo ID parametrop .)


state 80

    (22) parametrop -> COMMA . tipo ID parametrop
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    tipo                           shift and go to state 112

state 81

    (23) parametrop -> empty .

    R_PARENTHESIS   reduce using rule 23 (parametrop -> empty .)


state 82

    (5) varp -> tipo COLON ID varppp varpp SEMICOLON varpppp .

    FUNCION         reduce using rule 5 (varp -> tipo COLON ID varppp varpp SEMICOLON varpppp .)
    PRINCIPAL       reduce using rule 5 (varp -> tipo COLON ID varppp varpp SEMICOLON varpppp .)
    L_CURLY_BRACKET reduce using rule 5 (varp -> tipo COLON ID varppp varpp SEMICOLON varpppp .)


state 83

    (11) varpppp -> varp .

    FUNCION         reduce using rule 11 (varpppp -> varp .)
    PRINCIPAL       reduce using rule 11 (varpppp -> varp .)
    L_CURLY_BRACKET reduce using rule 11 (varpppp -> varp .)


state 84

    (12) varpppp -> empty .

    FUNCION         reduce using rule 12 (varpppp -> empty .)
    PRINCIPAL       reduce using rule 12 (varpppp -> empty .)
    L_CURLY_BRACKET reduce using rule 12 (varpppp -> empty .)


state 85

    (6) varpp -> COMMA ID varppp . varpp
    (6) varpp -> . COMMA ID varppp varpp
    (7) varpp -> . empty
    (91) empty -> .

    COMMA           shift and go to state 38
    SEMICOLON       reduce using rule 91 (empty -> .)

    varpp                          shift and go to state 113
    empty                          shift and go to state 39

state 86

    (37) asignacion -> ID dimId ASSIGN . expresion SEMICOLON
    (42) expresion -> . relacional expresionp
    (43) expresion -> . NOT relacional expresionp
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    NOT             shift and go to state 91
    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    expresion                      shift and go to state 114
    relacional                     shift and go to state 90
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 87

    (75) funcionVacia -> ID L_PARENTHESIS parametro . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 115


state 88

    (39) dimId -> dim dim .

    ASSIGN          reduce using rule 39 (dimId -> dim dim .)
    DETERMINANT     reduce using rule 39 (dimId -> dim dim .)
    TRANSPOSED      reduce using rule 39 (dimId -> dim dim .)
    INVERSE         reduce using rule 39 (dimId -> dim dim .)
    MULTIPLY        reduce using rule 39 (dimId -> dim dim .)
    DIVIDE          reduce using rule 39 (dimId -> dim dim .)
    SUM             reduce using rule 39 (dimId -> dim dim .)
    SUBTRACT        reduce using rule 39 (dimId -> dim dim .)
    EQUALS          reduce using rule 39 (dimId -> dim dim .)
    NOT_EQUAL       reduce using rule 39 (dimId -> dim dim .)
    LESS_THAN       reduce using rule 39 (dimId -> dim dim .)
    LESS_THAN_EQUAL reduce using rule 39 (dimId -> dim dim .)
    GREATER_THAN    reduce using rule 39 (dimId -> dim dim .)
    GREATER_THAN_EQUAL reduce using rule 39 (dimId -> dim dim .)
    AND             reduce using rule 39 (dimId -> dim dim .)
    OR              reduce using rule 39 (dimId -> dim dim .)
    R_SQUARE_BRACKET reduce using rule 39 (dimId -> dim dim .)
    R_PARENTHESIS   reduce using rule 39 (dimId -> dim dim .)
    COMMA           reduce using rule 39 (dimId -> dim dim .)
    SEMICOLON       reduce using rule 39 (dimId -> dim dim .)
    HASTA           reduce using rule 39 (dimId -> dim dim .)
    HACER           reduce using rule 39 (dimId -> dim dim .)


state 89

    (41) dim -> L_SQUARE_BRACKET expresion . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 116


state 90

    (42) expresion -> relacional . expresionp
    (44) expresionp -> . AND expresion
    (45) expresionp -> . OR expresion
    (46) expresionp -> . empty
    (91) empty -> .

    AND             shift and go to state 118
    OR              shift and go to state 119
    R_SQUARE_BRACKET reduce using rule 91 (empty -> .)
    R_PARENTHESIS   reduce using rule 91 (empty -> .)
    COMMA           reduce using rule 91 (empty -> .)
    SEMICOLON       reduce using rule 91 (empty -> .)
    HASTA           reduce using rule 91 (empty -> .)
    HACER           reduce using rule 91 (empty -> .)

    expresionp                     shift and go to state 117
    empty                          shift and go to state 120

state 91

    (43) expresion -> NOT . relacional expresionp
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    relacional                     shift and go to state 121
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 92

    (47) relacional -> aritmetica . relacionalp
    (48) relacionalp -> . EQUALS relacional
    (49) relacionalp -> . NOT_EQUAL relacional
    (50) relacionalp -> . LESS_THAN relacional
    (51) relacionalp -> . LESS_THAN_EQUAL relacional
    (52) relacionalp -> . GREATER_THAN relacional
    (53) relacionalp -> . GREATER_THAN_EQUAL relacional
    (54) relacionalp -> . empty
    (91) empty -> .

    EQUALS          shift and go to state 123
    NOT_EQUAL       shift and go to state 124
    LESS_THAN       shift and go to state 125
    LESS_THAN_EQUAL shift and go to state 126
    GREATER_THAN    shift and go to state 127
    GREATER_THAN_EQUAL shift and go to state 128
    AND             reduce using rule 91 (empty -> .)
    OR              reduce using rule 91 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 91 (empty -> .)
    R_PARENTHESIS   reduce using rule 91 (empty -> .)
    COMMA           reduce using rule 91 (empty -> .)
    SEMICOLON       reduce using rule 91 (empty -> .)
    HASTA           reduce using rule 91 (empty -> .)
    HACER           reduce using rule 91 (empty -> .)

    relacionalp                    shift and go to state 122
    empty                          shift and go to state 129

state 93

    (55) aritmetica -> factor . aritmeticap
    (56) aritmeticap -> . SUM aritmetica
    (57) aritmeticap -> . SUBTRACT aritmetica
    (58) aritmeticap -> . empty
    (91) empty -> .

    SUM             shift and go to state 131
    SUBTRACT        shift and go to state 132
    EQUALS          reduce using rule 91 (empty -> .)
    NOT_EQUAL       reduce using rule 91 (empty -> .)
    LESS_THAN       reduce using rule 91 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 91 (empty -> .)
    GREATER_THAN    reduce using rule 91 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 91 (empty -> .)
    AND             reduce using rule 91 (empty -> .)
    OR              reduce using rule 91 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 91 (empty -> .)
    R_PARENTHESIS   reduce using rule 91 (empty -> .)
    COMMA           reduce using rule 91 (empty -> .)
    SEMICOLON       reduce using rule 91 (empty -> .)
    HASTA           reduce using rule 91 (empty -> .)
    HACER           reduce using rule 91 (empty -> .)

    aritmeticap                    shift and go to state 130
    empty                          shift and go to state 133

state 94

    (59) factor -> matriz . factorp
    (60) factorp -> . MULTIPLY factor
    (61) factorp -> . DIVIDE factor
    (62) factorp -> . empty
    (91) empty -> .

    MULTIPLY        shift and go to state 135
    DIVIDE          shift and go to state 136
    SUM             reduce using rule 91 (empty -> .)
    SUBTRACT        reduce using rule 91 (empty -> .)
    EQUALS          reduce using rule 91 (empty -> .)
    NOT_EQUAL       reduce using rule 91 (empty -> .)
    LESS_THAN       reduce using rule 91 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 91 (empty -> .)
    GREATER_THAN    reduce using rule 91 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 91 (empty -> .)
    AND             reduce using rule 91 (empty -> .)
    OR              reduce using rule 91 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 91 (empty -> .)
    R_PARENTHESIS   reduce using rule 91 (empty -> .)
    COMMA           reduce using rule 91 (empty -> .)
    SEMICOLON       reduce using rule 91 (empty -> .)
    HASTA           reduce using rule 91 (empty -> .)
    HACER           reduce using rule 91 (empty -> .)

    factorp                        shift and go to state 134
    empty                          shift and go to state 137

state 95

    (63) matriz -> cte . matrizp
    (64) matrizp -> . DETERMINANT
    (65) matrizp -> . TRANSPOSED
    (66) matrizp -> . INVERSE
    (67) matrizp -> . empty
    (91) empty -> .

    DETERMINANT     shift and go to state 139
    TRANSPOSED      shift and go to state 140
    INVERSE         shift and go to state 141
    MULTIPLY        reduce using rule 91 (empty -> .)
    DIVIDE          reduce using rule 91 (empty -> .)
    SUM             reduce using rule 91 (empty -> .)
    SUBTRACT        reduce using rule 91 (empty -> .)
    EQUALS          reduce using rule 91 (empty -> .)
    NOT_EQUAL       reduce using rule 91 (empty -> .)
    LESS_THAN       reduce using rule 91 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 91 (empty -> .)
    GREATER_THAN    reduce using rule 91 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 91 (empty -> .)
    AND             reduce using rule 91 (empty -> .)
    OR              reduce using rule 91 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 91 (empty -> .)
    R_PARENTHESIS   reduce using rule 91 (empty -> .)
    COMMA           reduce using rule 91 (empty -> .)
    SEMICOLON       reduce using rule 91 (empty -> .)
    HASTA           reduce using rule 91 (empty -> .)
    HACER           reduce using rule 91 (empty -> .)

    matrizp                        shift and go to state 138
    empty                          shift and go to state 142

state 96

    (68) cte -> CTE_INT .

    DETERMINANT     reduce using rule 68 (cte -> CTE_INT .)
    TRANSPOSED      reduce using rule 68 (cte -> CTE_INT .)
    INVERSE         reduce using rule 68 (cte -> CTE_INT .)
    MULTIPLY        reduce using rule 68 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 68 (cte -> CTE_INT .)
    SUM             reduce using rule 68 (cte -> CTE_INT .)
    SUBTRACT        reduce using rule 68 (cte -> CTE_INT .)
    EQUALS          reduce using rule 68 (cte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 68 (cte -> CTE_INT .)
    LESS_THAN       reduce using rule 68 (cte -> CTE_INT .)
    LESS_THAN_EQUAL reduce using rule 68 (cte -> CTE_INT .)
    GREATER_THAN    reduce using rule 68 (cte -> CTE_INT .)
    GREATER_THAN_EQUAL reduce using rule 68 (cte -> CTE_INT .)
    AND             reduce using rule 68 (cte -> CTE_INT .)
    OR              reduce using rule 68 (cte -> CTE_INT .)
    R_SQUARE_BRACKET reduce using rule 68 (cte -> CTE_INT .)
    R_PARENTHESIS   reduce using rule 68 (cte -> CTE_INT .)
    COMMA           reduce using rule 68 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 68 (cte -> CTE_INT .)
    HASTA           reduce using rule 68 (cte -> CTE_INT .)
    HACER           reduce using rule 68 (cte -> CTE_INT .)


state 97

    (69) cte -> CTE_FLOAT .

    DETERMINANT     reduce using rule 69 (cte -> CTE_FLOAT .)
    TRANSPOSED      reduce using rule 69 (cte -> CTE_FLOAT .)
    INVERSE         reduce using rule 69 (cte -> CTE_FLOAT .)
    MULTIPLY        reduce using rule 69 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 69 (cte -> CTE_FLOAT .)
    SUM             reduce using rule 69 (cte -> CTE_FLOAT .)
    SUBTRACT        reduce using rule 69 (cte -> CTE_FLOAT .)
    EQUALS          reduce using rule 69 (cte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 69 (cte -> CTE_FLOAT .)
    LESS_THAN       reduce using rule 69 (cte -> CTE_FLOAT .)
    LESS_THAN_EQUAL reduce using rule 69 (cte -> CTE_FLOAT .)
    GREATER_THAN    reduce using rule 69 (cte -> CTE_FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 69 (cte -> CTE_FLOAT .)
    AND             reduce using rule 69 (cte -> CTE_FLOAT .)
    OR              reduce using rule 69 (cte -> CTE_FLOAT .)
    R_SQUARE_BRACKET reduce using rule 69 (cte -> CTE_FLOAT .)
    R_PARENTHESIS   reduce using rule 69 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 69 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 69 (cte -> CTE_FLOAT .)
    HASTA           reduce using rule 69 (cte -> CTE_FLOAT .)
    HACER           reduce using rule 69 (cte -> CTE_FLOAT .)


state 98

    (70) cte -> CTE_CHAR .

    DETERMINANT     reduce using rule 70 (cte -> CTE_CHAR .)
    TRANSPOSED      reduce using rule 70 (cte -> CTE_CHAR .)
    INVERSE         reduce using rule 70 (cte -> CTE_CHAR .)
    MULTIPLY        reduce using rule 70 (cte -> CTE_CHAR .)
    DIVIDE          reduce using rule 70 (cte -> CTE_CHAR .)
    SUM             reduce using rule 70 (cte -> CTE_CHAR .)
    SUBTRACT        reduce using rule 70 (cte -> CTE_CHAR .)
    EQUALS          reduce using rule 70 (cte -> CTE_CHAR .)
    NOT_EQUAL       reduce using rule 70 (cte -> CTE_CHAR .)
    LESS_THAN       reduce using rule 70 (cte -> CTE_CHAR .)
    LESS_THAN_EQUAL reduce using rule 70 (cte -> CTE_CHAR .)
    GREATER_THAN    reduce using rule 70 (cte -> CTE_CHAR .)
    GREATER_THAN_EQUAL reduce using rule 70 (cte -> CTE_CHAR .)
    AND             reduce using rule 70 (cte -> CTE_CHAR .)
    OR              reduce using rule 70 (cte -> CTE_CHAR .)
    R_SQUARE_BRACKET reduce using rule 70 (cte -> CTE_CHAR .)
    R_PARENTHESIS   reduce using rule 70 (cte -> CTE_CHAR .)
    COMMA           reduce using rule 70 (cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 70 (cte -> CTE_CHAR .)
    HASTA           reduce using rule 70 (cte -> CTE_CHAR .)
    HACER           reduce using rule 70 (cte -> CTE_CHAR .)


state 99

    (71) cte -> llamadaFuncion .

    DETERMINANT     reduce using rule 71 (cte -> llamadaFuncion .)
    TRANSPOSED      reduce using rule 71 (cte -> llamadaFuncion .)
    INVERSE         reduce using rule 71 (cte -> llamadaFuncion .)
    MULTIPLY        reduce using rule 71 (cte -> llamadaFuncion .)
    DIVIDE          reduce using rule 71 (cte -> llamadaFuncion .)
    SUM             reduce using rule 71 (cte -> llamadaFuncion .)
    SUBTRACT        reduce using rule 71 (cte -> llamadaFuncion .)
    EQUALS          reduce using rule 71 (cte -> llamadaFuncion .)
    NOT_EQUAL       reduce using rule 71 (cte -> llamadaFuncion .)
    LESS_THAN       reduce using rule 71 (cte -> llamadaFuncion .)
    LESS_THAN_EQUAL reduce using rule 71 (cte -> llamadaFuncion .)
    GREATER_THAN    reduce using rule 71 (cte -> llamadaFuncion .)
    GREATER_THAN_EQUAL reduce using rule 71 (cte -> llamadaFuncion .)
    AND             reduce using rule 71 (cte -> llamadaFuncion .)
    OR              reduce using rule 71 (cte -> llamadaFuncion .)
    R_SQUARE_BRACKET reduce using rule 71 (cte -> llamadaFuncion .)
    R_PARENTHESIS   reduce using rule 71 (cte -> llamadaFuncion .)
    COMMA           reduce using rule 71 (cte -> llamadaFuncion .)
    SEMICOLON       reduce using rule 71 (cte -> llamadaFuncion .)
    HASTA           reduce using rule 71 (cte -> llamadaFuncion .)
    HACER           reduce using rule 71 (cte -> llamadaFuncion .)


state 100

    (72) cte -> ID . dimId
    (74) llamadaFuncion -> ID . L_PARENTHESIS parametro R_PARENTHESIS
    (38) dimId -> . dim
    (39) dimId -> . dim dim
    (40) dimId -> . empty
    (41) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (91) empty -> .

    L_PARENTHESIS   shift and go to state 144
    L_SQUARE_BRACKET shift and go to state 71
    DETERMINANT     reduce using rule 91 (empty -> .)
    TRANSPOSED      reduce using rule 91 (empty -> .)
    INVERSE         reduce using rule 91 (empty -> .)
    MULTIPLY        reduce using rule 91 (empty -> .)
    DIVIDE          reduce using rule 91 (empty -> .)
    SUM             reduce using rule 91 (empty -> .)
    SUBTRACT        reduce using rule 91 (empty -> .)
    EQUALS          reduce using rule 91 (empty -> .)
    NOT_EQUAL       reduce using rule 91 (empty -> .)
    LESS_THAN       reduce using rule 91 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 91 (empty -> .)
    GREATER_THAN    reduce using rule 91 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 91 (empty -> .)
    AND             reduce using rule 91 (empty -> .)
    OR              reduce using rule 91 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 91 (empty -> .)
    R_PARENTHESIS   reduce using rule 91 (empty -> .)
    COMMA           reduce using rule 91 (empty -> .)
    SEMICOLON       reduce using rule 91 (empty -> .)
    HASTA           reduce using rule 91 (empty -> .)
    HACER           reduce using rule 91 (empty -> .)

    dimId                          shift and go to state 143
    dim                            shift and go to state 69
    empty                          shift and go to state 70

state 101

    (73) cte -> L_PARENTHESIS . expresion R_PARENTHESIS
    (42) expresion -> . relacional expresionp
    (43) expresion -> . NOT relacional expresionp
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    NOT             shift and go to state 91
    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    expresion                      shift and go to state 145
    relacional                     shift and go to state 90
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 102

    (76) regresa -> REGRESA L_PARENTHESIS expresion . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 146


state 103

    (77) lectura -> LECTURA L_PARENTHESIS lecturap . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 147


state 104

    (78) lecturap -> ID . dimId lecturapp
    (38) dimId -> . dim
    (39) dimId -> . dim dim
    (40) dimId -> . empty
    (41) dim -> . L_SQUARE_BRACKET expresion R_SQUARE_BRACKET
    (91) empty -> .

    L_SQUARE_BRACKET shift and go to state 71
    COMMA           reduce using rule 91 (empty -> .)
    R_PARENTHESIS   reduce using rule 91 (empty -> .)

    dimId                          shift and go to state 148
    dim                            shift and go to state 69
    empty                          shift and go to state 70

state 105

    (81) escritura -> ESCRIBE L_PARENTHESIS escriturap . R_PARENTHESIS SEMICOLON

    R_PARENTHESIS   shift and go to state 149


state 106

    (82) escriturap -> LETRERO . escriturapp
    (84) escriturapp -> . COMMA escriturap
    (85) escriturapp -> . empty
    (91) empty -> .

    COMMA           shift and go to state 151
    R_PARENTHESIS   reduce using rule 91 (empty -> .)

    escriturapp                    shift and go to state 150
    empty                          shift and go to state 152

state 107

    (83) escriturap -> expresion . escriturapp
    (84) escriturapp -> . COMMA escriturap
    (85) escriturapp -> . empty
    (91) empty -> .

    COMMA           shift and go to state 151
    R_PARENTHESIS   reduce using rule 91 (empty -> .)

    escriturapp                    shift and go to state 153
    empty                          shift and go to state 152

state 108

    (86) decision -> SI L_PARENTHESIS expresion . R_PARENTHESIS HAZ bloque decisionp

    R_PARENTHESIS   shift and go to state 154


state 109

    (89) cicloCondicional -> MIENTRAS L_PARENTHESIS expresion . R_PARENTHESIS HAZ bloque

    R_PARENTHESIS   shift and go to state 155


state 110

    (90) cicloNoCondicional -> DESDE ID dimId . ASSIGN expresion HASTA expresion HACER bloque

    ASSIGN          shift and go to state 156


state 111

    (19) funcionp -> tipoRetorno ID L_PARENTHESIS parametro R_PARENTHESIS var bloque . funcion
    (17) funcion -> . FUNCION funcionp
    (18) funcion -> . empty
    (91) empty -> .

    FUNCION         shift and go to state 10
    PRINCIPAL       reduce using rule 91 (empty -> .)

    funcion                        shift and go to state 157
    empty                          shift and go to state 11

state 112

    (22) parametrop -> COMMA tipo . ID parametrop

    ID              shift and go to state 158


state 113

    (6) varpp -> COMMA ID varppp varpp .

    SEMICOLON       reduce using rule 6 (varpp -> COMMA ID varppp varpp .)


state 114

    (37) asignacion -> ID dimId ASSIGN expresion . SEMICOLON

    SEMICOLON       shift and go to state 159


state 115

    (75) funcionVacia -> ID L_PARENTHESIS parametro R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 160


state 116

    (41) dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .

    L_SQUARE_BRACKET reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    ASSIGN          reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    DETERMINANT     reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    TRANSPOSED      reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    INVERSE         reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    MULTIPLY        reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    SUM             reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    SUBTRACT        reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    EQUALS          reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    LESS_THAN       reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    LESS_THAN_EQUAL reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    GREATER_THAN    reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    GREATER_THAN_EQUAL reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    AND             reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    OR              reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    R_PARENTHESIS   reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    COMMA           reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    HASTA           reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)
    HACER           reduce using rule 41 (dim -> L_SQUARE_BRACKET expresion R_SQUARE_BRACKET .)


state 117

    (42) expresion -> relacional expresionp .

    R_SQUARE_BRACKET reduce using rule 42 (expresion -> relacional expresionp .)
    R_PARENTHESIS   reduce using rule 42 (expresion -> relacional expresionp .)
    COMMA           reduce using rule 42 (expresion -> relacional expresionp .)
    SEMICOLON       reduce using rule 42 (expresion -> relacional expresionp .)
    HASTA           reduce using rule 42 (expresion -> relacional expresionp .)
    HACER           reduce using rule 42 (expresion -> relacional expresionp .)


state 118

    (44) expresionp -> AND . expresion
    (42) expresion -> . relacional expresionp
    (43) expresion -> . NOT relacional expresionp
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    NOT             shift and go to state 91
    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    expresion                      shift and go to state 161
    relacional                     shift and go to state 90
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 119

    (45) expresionp -> OR . expresion
    (42) expresion -> . relacional expresionp
    (43) expresion -> . NOT relacional expresionp
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    NOT             shift and go to state 91
    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    expresion                      shift and go to state 162
    relacional                     shift and go to state 90
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 120

    (46) expresionp -> empty .

    R_SQUARE_BRACKET reduce using rule 46 (expresionp -> empty .)
    R_PARENTHESIS   reduce using rule 46 (expresionp -> empty .)
    COMMA           reduce using rule 46 (expresionp -> empty .)
    SEMICOLON       reduce using rule 46 (expresionp -> empty .)
    HASTA           reduce using rule 46 (expresionp -> empty .)
    HACER           reduce using rule 46 (expresionp -> empty .)


state 121

    (43) expresion -> NOT relacional . expresionp
    (44) expresionp -> . AND expresion
    (45) expresionp -> . OR expresion
    (46) expresionp -> . empty
    (91) empty -> .

    AND             shift and go to state 118
    OR              shift and go to state 119
    R_SQUARE_BRACKET reduce using rule 91 (empty -> .)
    R_PARENTHESIS   reduce using rule 91 (empty -> .)
    COMMA           reduce using rule 91 (empty -> .)
    SEMICOLON       reduce using rule 91 (empty -> .)
    HASTA           reduce using rule 91 (empty -> .)
    HACER           reduce using rule 91 (empty -> .)

    expresionp                     shift and go to state 163
    empty                          shift and go to state 120

state 122

    (47) relacional -> aritmetica relacionalp .

    AND             reduce using rule 47 (relacional -> aritmetica relacionalp .)
    OR              reduce using rule 47 (relacional -> aritmetica relacionalp .)
    R_SQUARE_BRACKET reduce using rule 47 (relacional -> aritmetica relacionalp .)
    R_PARENTHESIS   reduce using rule 47 (relacional -> aritmetica relacionalp .)
    COMMA           reduce using rule 47 (relacional -> aritmetica relacionalp .)
    SEMICOLON       reduce using rule 47 (relacional -> aritmetica relacionalp .)
    HASTA           reduce using rule 47 (relacional -> aritmetica relacionalp .)
    HACER           reduce using rule 47 (relacional -> aritmetica relacionalp .)


state 123

    (48) relacionalp -> EQUALS . relacional
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    relacional                     shift and go to state 164
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 124

    (49) relacionalp -> NOT_EQUAL . relacional
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    relacional                     shift and go to state 165
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 125

    (50) relacionalp -> LESS_THAN . relacional
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    relacional                     shift and go to state 166
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 126

    (51) relacionalp -> LESS_THAN_EQUAL . relacional
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    relacional                     shift and go to state 167
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 127

    (52) relacionalp -> GREATER_THAN . relacional
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    relacional                     shift and go to state 168
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 128

    (53) relacionalp -> GREATER_THAN_EQUAL . relacional
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    relacional                     shift and go to state 169
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 129

    (54) relacionalp -> empty .

    AND             reduce using rule 54 (relacionalp -> empty .)
    OR              reduce using rule 54 (relacionalp -> empty .)
    R_SQUARE_BRACKET reduce using rule 54 (relacionalp -> empty .)
    R_PARENTHESIS   reduce using rule 54 (relacionalp -> empty .)
    COMMA           reduce using rule 54 (relacionalp -> empty .)
    SEMICOLON       reduce using rule 54 (relacionalp -> empty .)
    HASTA           reduce using rule 54 (relacionalp -> empty .)
    HACER           reduce using rule 54 (relacionalp -> empty .)


state 130

    (55) aritmetica -> factor aritmeticap .

    EQUALS          reduce using rule 55 (aritmetica -> factor aritmeticap .)
    NOT_EQUAL       reduce using rule 55 (aritmetica -> factor aritmeticap .)
    LESS_THAN       reduce using rule 55 (aritmetica -> factor aritmeticap .)
    LESS_THAN_EQUAL reduce using rule 55 (aritmetica -> factor aritmeticap .)
    GREATER_THAN    reduce using rule 55 (aritmetica -> factor aritmeticap .)
    GREATER_THAN_EQUAL reduce using rule 55 (aritmetica -> factor aritmeticap .)
    AND             reduce using rule 55 (aritmetica -> factor aritmeticap .)
    OR              reduce using rule 55 (aritmetica -> factor aritmeticap .)
    R_SQUARE_BRACKET reduce using rule 55 (aritmetica -> factor aritmeticap .)
    R_PARENTHESIS   reduce using rule 55 (aritmetica -> factor aritmeticap .)
    COMMA           reduce using rule 55 (aritmetica -> factor aritmeticap .)
    SEMICOLON       reduce using rule 55 (aritmetica -> factor aritmeticap .)
    HASTA           reduce using rule 55 (aritmetica -> factor aritmeticap .)
    HACER           reduce using rule 55 (aritmetica -> factor aritmeticap .)


state 131

    (56) aritmeticap -> SUM . aritmetica
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    aritmetica                     shift and go to state 170
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 132

    (57) aritmeticap -> SUBTRACT . aritmetica
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    aritmetica                     shift and go to state 171
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 133

    (58) aritmeticap -> empty .

    EQUALS          reduce using rule 58 (aritmeticap -> empty .)
    NOT_EQUAL       reduce using rule 58 (aritmeticap -> empty .)
    LESS_THAN       reduce using rule 58 (aritmeticap -> empty .)
    LESS_THAN_EQUAL reduce using rule 58 (aritmeticap -> empty .)
    GREATER_THAN    reduce using rule 58 (aritmeticap -> empty .)
    GREATER_THAN_EQUAL reduce using rule 58 (aritmeticap -> empty .)
    AND             reduce using rule 58 (aritmeticap -> empty .)
    OR              reduce using rule 58 (aritmeticap -> empty .)
    R_SQUARE_BRACKET reduce using rule 58 (aritmeticap -> empty .)
    R_PARENTHESIS   reduce using rule 58 (aritmeticap -> empty .)
    COMMA           reduce using rule 58 (aritmeticap -> empty .)
    SEMICOLON       reduce using rule 58 (aritmeticap -> empty .)
    HASTA           reduce using rule 58 (aritmeticap -> empty .)
    HACER           reduce using rule 58 (aritmeticap -> empty .)


state 134

    (59) factor -> matriz factorp .

    SUM             reduce using rule 59 (factor -> matriz factorp .)
    SUBTRACT        reduce using rule 59 (factor -> matriz factorp .)
    EQUALS          reduce using rule 59 (factor -> matriz factorp .)
    NOT_EQUAL       reduce using rule 59 (factor -> matriz factorp .)
    LESS_THAN       reduce using rule 59 (factor -> matriz factorp .)
    LESS_THAN_EQUAL reduce using rule 59 (factor -> matriz factorp .)
    GREATER_THAN    reduce using rule 59 (factor -> matriz factorp .)
    GREATER_THAN_EQUAL reduce using rule 59 (factor -> matriz factorp .)
    AND             reduce using rule 59 (factor -> matriz factorp .)
    OR              reduce using rule 59 (factor -> matriz factorp .)
    R_SQUARE_BRACKET reduce using rule 59 (factor -> matriz factorp .)
    R_PARENTHESIS   reduce using rule 59 (factor -> matriz factorp .)
    COMMA           reduce using rule 59 (factor -> matriz factorp .)
    SEMICOLON       reduce using rule 59 (factor -> matriz factorp .)
    HASTA           reduce using rule 59 (factor -> matriz factorp .)
    HACER           reduce using rule 59 (factor -> matriz factorp .)


state 135

    (60) factorp -> MULTIPLY . factor
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    factor                         shift and go to state 172
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 136

    (61) factorp -> DIVIDE . factor
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    factor                         shift and go to state 173
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 137

    (62) factorp -> empty .

    SUM             reduce using rule 62 (factorp -> empty .)
    SUBTRACT        reduce using rule 62 (factorp -> empty .)
    EQUALS          reduce using rule 62 (factorp -> empty .)
    NOT_EQUAL       reduce using rule 62 (factorp -> empty .)
    LESS_THAN       reduce using rule 62 (factorp -> empty .)
    LESS_THAN_EQUAL reduce using rule 62 (factorp -> empty .)
    GREATER_THAN    reduce using rule 62 (factorp -> empty .)
    GREATER_THAN_EQUAL reduce using rule 62 (factorp -> empty .)
    AND             reduce using rule 62 (factorp -> empty .)
    OR              reduce using rule 62 (factorp -> empty .)
    R_SQUARE_BRACKET reduce using rule 62 (factorp -> empty .)
    R_PARENTHESIS   reduce using rule 62 (factorp -> empty .)
    COMMA           reduce using rule 62 (factorp -> empty .)
    SEMICOLON       reduce using rule 62 (factorp -> empty .)
    HASTA           reduce using rule 62 (factorp -> empty .)
    HACER           reduce using rule 62 (factorp -> empty .)


state 138

    (63) matriz -> cte matrizp .

    MULTIPLY        reduce using rule 63 (matriz -> cte matrizp .)
    DIVIDE          reduce using rule 63 (matriz -> cte matrizp .)
    SUM             reduce using rule 63 (matriz -> cte matrizp .)
    SUBTRACT        reduce using rule 63 (matriz -> cte matrizp .)
    EQUALS          reduce using rule 63 (matriz -> cte matrizp .)
    NOT_EQUAL       reduce using rule 63 (matriz -> cte matrizp .)
    LESS_THAN       reduce using rule 63 (matriz -> cte matrizp .)
    LESS_THAN_EQUAL reduce using rule 63 (matriz -> cte matrizp .)
    GREATER_THAN    reduce using rule 63 (matriz -> cte matrizp .)
    GREATER_THAN_EQUAL reduce using rule 63 (matriz -> cte matrizp .)
    AND             reduce using rule 63 (matriz -> cte matrizp .)
    OR              reduce using rule 63 (matriz -> cte matrizp .)
    R_SQUARE_BRACKET reduce using rule 63 (matriz -> cte matrizp .)
    R_PARENTHESIS   reduce using rule 63 (matriz -> cte matrizp .)
    COMMA           reduce using rule 63 (matriz -> cte matrizp .)
    SEMICOLON       reduce using rule 63 (matriz -> cte matrizp .)
    HASTA           reduce using rule 63 (matriz -> cte matrizp .)
    HACER           reduce using rule 63 (matriz -> cte matrizp .)


state 139

    (64) matrizp -> DETERMINANT .

    MULTIPLY        reduce using rule 64 (matrizp -> DETERMINANT .)
    DIVIDE          reduce using rule 64 (matrizp -> DETERMINANT .)
    SUM             reduce using rule 64 (matrizp -> DETERMINANT .)
    SUBTRACT        reduce using rule 64 (matrizp -> DETERMINANT .)
    EQUALS          reduce using rule 64 (matrizp -> DETERMINANT .)
    NOT_EQUAL       reduce using rule 64 (matrizp -> DETERMINANT .)
    LESS_THAN       reduce using rule 64 (matrizp -> DETERMINANT .)
    LESS_THAN_EQUAL reduce using rule 64 (matrizp -> DETERMINANT .)
    GREATER_THAN    reduce using rule 64 (matrizp -> DETERMINANT .)
    GREATER_THAN_EQUAL reduce using rule 64 (matrizp -> DETERMINANT .)
    AND             reduce using rule 64 (matrizp -> DETERMINANT .)
    OR              reduce using rule 64 (matrizp -> DETERMINANT .)
    R_SQUARE_BRACKET reduce using rule 64 (matrizp -> DETERMINANT .)
    R_PARENTHESIS   reduce using rule 64 (matrizp -> DETERMINANT .)
    COMMA           reduce using rule 64 (matrizp -> DETERMINANT .)
    SEMICOLON       reduce using rule 64 (matrizp -> DETERMINANT .)
    HASTA           reduce using rule 64 (matrizp -> DETERMINANT .)
    HACER           reduce using rule 64 (matrizp -> DETERMINANT .)


state 140

    (65) matrizp -> TRANSPOSED .

    MULTIPLY        reduce using rule 65 (matrizp -> TRANSPOSED .)
    DIVIDE          reduce using rule 65 (matrizp -> TRANSPOSED .)
    SUM             reduce using rule 65 (matrizp -> TRANSPOSED .)
    SUBTRACT        reduce using rule 65 (matrizp -> TRANSPOSED .)
    EQUALS          reduce using rule 65 (matrizp -> TRANSPOSED .)
    NOT_EQUAL       reduce using rule 65 (matrizp -> TRANSPOSED .)
    LESS_THAN       reduce using rule 65 (matrizp -> TRANSPOSED .)
    LESS_THAN_EQUAL reduce using rule 65 (matrizp -> TRANSPOSED .)
    GREATER_THAN    reduce using rule 65 (matrizp -> TRANSPOSED .)
    GREATER_THAN_EQUAL reduce using rule 65 (matrizp -> TRANSPOSED .)
    AND             reduce using rule 65 (matrizp -> TRANSPOSED .)
    OR              reduce using rule 65 (matrizp -> TRANSPOSED .)
    R_SQUARE_BRACKET reduce using rule 65 (matrizp -> TRANSPOSED .)
    R_PARENTHESIS   reduce using rule 65 (matrizp -> TRANSPOSED .)
    COMMA           reduce using rule 65 (matrizp -> TRANSPOSED .)
    SEMICOLON       reduce using rule 65 (matrizp -> TRANSPOSED .)
    HASTA           reduce using rule 65 (matrizp -> TRANSPOSED .)
    HACER           reduce using rule 65 (matrizp -> TRANSPOSED .)


state 141

    (66) matrizp -> INVERSE .

    MULTIPLY        reduce using rule 66 (matrizp -> INVERSE .)
    DIVIDE          reduce using rule 66 (matrizp -> INVERSE .)
    SUM             reduce using rule 66 (matrizp -> INVERSE .)
    SUBTRACT        reduce using rule 66 (matrizp -> INVERSE .)
    EQUALS          reduce using rule 66 (matrizp -> INVERSE .)
    NOT_EQUAL       reduce using rule 66 (matrizp -> INVERSE .)
    LESS_THAN       reduce using rule 66 (matrizp -> INVERSE .)
    LESS_THAN_EQUAL reduce using rule 66 (matrizp -> INVERSE .)
    GREATER_THAN    reduce using rule 66 (matrizp -> INVERSE .)
    GREATER_THAN_EQUAL reduce using rule 66 (matrizp -> INVERSE .)
    AND             reduce using rule 66 (matrizp -> INVERSE .)
    OR              reduce using rule 66 (matrizp -> INVERSE .)
    R_SQUARE_BRACKET reduce using rule 66 (matrizp -> INVERSE .)
    R_PARENTHESIS   reduce using rule 66 (matrizp -> INVERSE .)
    COMMA           reduce using rule 66 (matrizp -> INVERSE .)
    SEMICOLON       reduce using rule 66 (matrizp -> INVERSE .)
    HASTA           reduce using rule 66 (matrizp -> INVERSE .)
    HACER           reduce using rule 66 (matrizp -> INVERSE .)


state 142

    (67) matrizp -> empty .

    MULTIPLY        reduce using rule 67 (matrizp -> empty .)
    DIVIDE          reduce using rule 67 (matrizp -> empty .)
    SUM             reduce using rule 67 (matrizp -> empty .)
    SUBTRACT        reduce using rule 67 (matrizp -> empty .)
    EQUALS          reduce using rule 67 (matrizp -> empty .)
    NOT_EQUAL       reduce using rule 67 (matrizp -> empty .)
    LESS_THAN       reduce using rule 67 (matrizp -> empty .)
    LESS_THAN_EQUAL reduce using rule 67 (matrizp -> empty .)
    GREATER_THAN    reduce using rule 67 (matrizp -> empty .)
    GREATER_THAN_EQUAL reduce using rule 67 (matrizp -> empty .)
    AND             reduce using rule 67 (matrizp -> empty .)
    OR              reduce using rule 67 (matrizp -> empty .)
    R_SQUARE_BRACKET reduce using rule 67 (matrizp -> empty .)
    R_PARENTHESIS   reduce using rule 67 (matrizp -> empty .)
    COMMA           reduce using rule 67 (matrizp -> empty .)
    SEMICOLON       reduce using rule 67 (matrizp -> empty .)
    HASTA           reduce using rule 67 (matrizp -> empty .)
    HACER           reduce using rule 67 (matrizp -> empty .)


state 143

    (72) cte -> ID dimId .

    DETERMINANT     reduce using rule 72 (cte -> ID dimId .)
    TRANSPOSED      reduce using rule 72 (cte -> ID dimId .)
    INVERSE         reduce using rule 72 (cte -> ID dimId .)
    MULTIPLY        reduce using rule 72 (cte -> ID dimId .)
    DIVIDE          reduce using rule 72 (cte -> ID dimId .)
    SUM             reduce using rule 72 (cte -> ID dimId .)
    SUBTRACT        reduce using rule 72 (cte -> ID dimId .)
    EQUALS          reduce using rule 72 (cte -> ID dimId .)
    NOT_EQUAL       reduce using rule 72 (cte -> ID dimId .)
    LESS_THAN       reduce using rule 72 (cte -> ID dimId .)
    LESS_THAN_EQUAL reduce using rule 72 (cte -> ID dimId .)
    GREATER_THAN    reduce using rule 72 (cte -> ID dimId .)
    GREATER_THAN_EQUAL reduce using rule 72 (cte -> ID dimId .)
    AND             reduce using rule 72 (cte -> ID dimId .)
    OR              reduce using rule 72 (cte -> ID dimId .)
    R_SQUARE_BRACKET reduce using rule 72 (cte -> ID dimId .)
    R_PARENTHESIS   reduce using rule 72 (cte -> ID dimId .)
    COMMA           reduce using rule 72 (cte -> ID dimId .)
    SEMICOLON       reduce using rule 72 (cte -> ID dimId .)
    HASTA           reduce using rule 72 (cte -> ID dimId .)
    HACER           reduce using rule 72 (cte -> ID dimId .)


state 144

    (74) llamadaFuncion -> ID L_PARENTHESIS . parametro R_PARENTHESIS
    (20) parametro -> . tipo ID parametrop
    (21) parametro -> . empty
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . CHAR
    (91) empty -> .

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16
    R_PARENTHESIS   reduce using rule 91 (empty -> .)

    parametro                      shift and go to state 174
    tipo                           shift and go to state 35
    empty                          shift and go to state 36

state 145

    (73) cte -> L_PARENTHESIS expresion . R_PARENTHESIS

    R_PARENTHESIS   shift and go to state 175


state 146

    (76) regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 176


state 147

    (77) lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 177


state 148

    (78) lecturap -> ID dimId . lecturapp
    (79) lecturapp -> . COMMA lecturap
    (80) lecturapp -> . empty
    (91) empty -> .

    COMMA           shift and go to state 179
    R_PARENTHESIS   reduce using rule 91 (empty -> .)

    lecturapp                      shift and go to state 178
    empty                          shift and go to state 180

state 149

    (81) escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 181


state 150

    (82) escriturap -> LETRERO escriturapp .

    R_PARENTHESIS   reduce using rule 82 (escriturap -> LETRERO escriturapp .)


state 151

    (84) escriturapp -> COMMA . escriturap
    (82) escriturap -> . LETRERO escriturapp
    (83) escriturap -> . expresion escriturapp
    (42) expresion -> . relacional expresionp
    (43) expresion -> . NOT relacional expresionp
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    LETRERO         shift and go to state 106
    NOT             shift and go to state 91
    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    escriturap                     shift and go to state 182
    expresion                      shift and go to state 107
    relacional                     shift and go to state 90
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 152

    (85) escriturapp -> empty .

    R_PARENTHESIS   reduce using rule 85 (escriturapp -> empty .)


state 153

    (83) escriturap -> expresion escriturapp .

    R_PARENTHESIS   reduce using rule 83 (escriturap -> expresion escriturapp .)


state 154

    (86) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS . HAZ bloque decisionp

    HAZ             shift and go to state 183


state 155

    (89) cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS . HAZ bloque

    HAZ             shift and go to state 184


state 156

    (90) cicloNoCondicional -> DESDE ID dimId ASSIGN . expresion HASTA expresion HACER bloque
    (42) expresion -> . relacional expresionp
    (43) expresion -> . NOT relacional expresionp
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    NOT             shift and go to state 91
    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    expresion                      shift and go to state 185
    relacional                     shift and go to state 90
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 157

    (19) funcionp -> tipoRetorno ID L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion .

    PRINCIPAL       reduce using rule 19 (funcionp -> tipoRetorno ID L_PARENTHESIS parametro R_PARENTHESIS var bloque funcion .)


state 158

    (22) parametrop -> COMMA tipo ID . parametrop
    (22) parametrop -> . COMMA tipo ID parametrop
    (23) parametrop -> . empty
    (91) empty -> .

    COMMA           shift and go to state 80
    R_PARENTHESIS   reduce using rule 91 (empty -> .)

    parametrop                     shift and go to state 186
    empty                          shift and go to state 81

state 159

    (37) asignacion -> ID dimId ASSIGN expresion SEMICOLON .

    ID              reduce using rule 37 (asignacion -> ID dimId ASSIGN expresion SEMICOLON .)
    REGRESA         reduce using rule 37 (asignacion -> ID dimId ASSIGN expresion SEMICOLON .)
    LECTURA         reduce using rule 37 (asignacion -> ID dimId ASSIGN expresion SEMICOLON .)
    ESCRIBE         reduce using rule 37 (asignacion -> ID dimId ASSIGN expresion SEMICOLON .)
    SI              reduce using rule 37 (asignacion -> ID dimId ASSIGN expresion SEMICOLON .)
    MIENTRAS        reduce using rule 37 (asignacion -> ID dimId ASSIGN expresion SEMICOLON .)
    DESDE           reduce using rule 37 (asignacion -> ID dimId ASSIGN expresion SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 37 (asignacion -> ID dimId ASSIGN expresion SEMICOLON .)


state 160

    (75) funcionVacia -> ID L_PARENTHESIS parametro R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 75 (funcionVacia -> ID L_PARENTHESIS parametro R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 75 (funcionVacia -> ID L_PARENTHESIS parametro R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 75 (funcionVacia -> ID L_PARENTHESIS parametro R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 75 (funcionVacia -> ID L_PARENTHESIS parametro R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 75 (funcionVacia -> ID L_PARENTHESIS parametro R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 75 (funcionVacia -> ID L_PARENTHESIS parametro R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 75 (funcionVacia -> ID L_PARENTHESIS parametro R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 75 (funcionVacia -> ID L_PARENTHESIS parametro R_PARENTHESIS SEMICOLON .)


state 161

    (44) expresionp -> AND expresion .

    R_SQUARE_BRACKET reduce using rule 44 (expresionp -> AND expresion .)
    R_PARENTHESIS   reduce using rule 44 (expresionp -> AND expresion .)
    COMMA           reduce using rule 44 (expresionp -> AND expresion .)
    SEMICOLON       reduce using rule 44 (expresionp -> AND expresion .)
    HASTA           reduce using rule 44 (expresionp -> AND expresion .)
    HACER           reduce using rule 44 (expresionp -> AND expresion .)


state 162

    (45) expresionp -> OR expresion .

    R_SQUARE_BRACKET reduce using rule 45 (expresionp -> OR expresion .)
    R_PARENTHESIS   reduce using rule 45 (expresionp -> OR expresion .)
    COMMA           reduce using rule 45 (expresionp -> OR expresion .)
    SEMICOLON       reduce using rule 45 (expresionp -> OR expresion .)
    HASTA           reduce using rule 45 (expresionp -> OR expresion .)
    HACER           reduce using rule 45 (expresionp -> OR expresion .)


state 163

    (43) expresion -> NOT relacional expresionp .

    R_SQUARE_BRACKET reduce using rule 43 (expresion -> NOT relacional expresionp .)
    R_PARENTHESIS   reduce using rule 43 (expresion -> NOT relacional expresionp .)
    COMMA           reduce using rule 43 (expresion -> NOT relacional expresionp .)
    SEMICOLON       reduce using rule 43 (expresion -> NOT relacional expresionp .)
    HASTA           reduce using rule 43 (expresion -> NOT relacional expresionp .)
    HACER           reduce using rule 43 (expresion -> NOT relacional expresionp .)


state 164

    (48) relacionalp -> EQUALS relacional .

    AND             reduce using rule 48 (relacionalp -> EQUALS relacional .)
    OR              reduce using rule 48 (relacionalp -> EQUALS relacional .)
    R_SQUARE_BRACKET reduce using rule 48 (relacionalp -> EQUALS relacional .)
    R_PARENTHESIS   reduce using rule 48 (relacionalp -> EQUALS relacional .)
    COMMA           reduce using rule 48 (relacionalp -> EQUALS relacional .)
    SEMICOLON       reduce using rule 48 (relacionalp -> EQUALS relacional .)
    HASTA           reduce using rule 48 (relacionalp -> EQUALS relacional .)
    HACER           reduce using rule 48 (relacionalp -> EQUALS relacional .)


state 165

    (49) relacionalp -> NOT_EQUAL relacional .

    AND             reduce using rule 49 (relacionalp -> NOT_EQUAL relacional .)
    OR              reduce using rule 49 (relacionalp -> NOT_EQUAL relacional .)
    R_SQUARE_BRACKET reduce using rule 49 (relacionalp -> NOT_EQUAL relacional .)
    R_PARENTHESIS   reduce using rule 49 (relacionalp -> NOT_EQUAL relacional .)
    COMMA           reduce using rule 49 (relacionalp -> NOT_EQUAL relacional .)
    SEMICOLON       reduce using rule 49 (relacionalp -> NOT_EQUAL relacional .)
    HASTA           reduce using rule 49 (relacionalp -> NOT_EQUAL relacional .)
    HACER           reduce using rule 49 (relacionalp -> NOT_EQUAL relacional .)


state 166

    (50) relacionalp -> LESS_THAN relacional .

    AND             reduce using rule 50 (relacionalp -> LESS_THAN relacional .)
    OR              reduce using rule 50 (relacionalp -> LESS_THAN relacional .)
    R_SQUARE_BRACKET reduce using rule 50 (relacionalp -> LESS_THAN relacional .)
    R_PARENTHESIS   reduce using rule 50 (relacionalp -> LESS_THAN relacional .)
    COMMA           reduce using rule 50 (relacionalp -> LESS_THAN relacional .)
    SEMICOLON       reduce using rule 50 (relacionalp -> LESS_THAN relacional .)
    HASTA           reduce using rule 50 (relacionalp -> LESS_THAN relacional .)
    HACER           reduce using rule 50 (relacionalp -> LESS_THAN relacional .)


state 167

    (51) relacionalp -> LESS_THAN_EQUAL relacional .

    AND             reduce using rule 51 (relacionalp -> LESS_THAN_EQUAL relacional .)
    OR              reduce using rule 51 (relacionalp -> LESS_THAN_EQUAL relacional .)
    R_SQUARE_BRACKET reduce using rule 51 (relacionalp -> LESS_THAN_EQUAL relacional .)
    R_PARENTHESIS   reduce using rule 51 (relacionalp -> LESS_THAN_EQUAL relacional .)
    COMMA           reduce using rule 51 (relacionalp -> LESS_THAN_EQUAL relacional .)
    SEMICOLON       reduce using rule 51 (relacionalp -> LESS_THAN_EQUAL relacional .)
    HASTA           reduce using rule 51 (relacionalp -> LESS_THAN_EQUAL relacional .)
    HACER           reduce using rule 51 (relacionalp -> LESS_THAN_EQUAL relacional .)


state 168

    (52) relacionalp -> GREATER_THAN relacional .

    AND             reduce using rule 52 (relacionalp -> GREATER_THAN relacional .)
    OR              reduce using rule 52 (relacionalp -> GREATER_THAN relacional .)
    R_SQUARE_BRACKET reduce using rule 52 (relacionalp -> GREATER_THAN relacional .)
    R_PARENTHESIS   reduce using rule 52 (relacionalp -> GREATER_THAN relacional .)
    COMMA           reduce using rule 52 (relacionalp -> GREATER_THAN relacional .)
    SEMICOLON       reduce using rule 52 (relacionalp -> GREATER_THAN relacional .)
    HASTA           reduce using rule 52 (relacionalp -> GREATER_THAN relacional .)
    HACER           reduce using rule 52 (relacionalp -> GREATER_THAN relacional .)


state 169

    (53) relacionalp -> GREATER_THAN_EQUAL relacional .

    AND             reduce using rule 53 (relacionalp -> GREATER_THAN_EQUAL relacional .)
    OR              reduce using rule 53 (relacionalp -> GREATER_THAN_EQUAL relacional .)
    R_SQUARE_BRACKET reduce using rule 53 (relacionalp -> GREATER_THAN_EQUAL relacional .)
    R_PARENTHESIS   reduce using rule 53 (relacionalp -> GREATER_THAN_EQUAL relacional .)
    COMMA           reduce using rule 53 (relacionalp -> GREATER_THAN_EQUAL relacional .)
    SEMICOLON       reduce using rule 53 (relacionalp -> GREATER_THAN_EQUAL relacional .)
    HASTA           reduce using rule 53 (relacionalp -> GREATER_THAN_EQUAL relacional .)
    HACER           reduce using rule 53 (relacionalp -> GREATER_THAN_EQUAL relacional .)


state 170

    (56) aritmeticap -> SUM aritmetica .

    EQUALS          reduce using rule 56 (aritmeticap -> SUM aritmetica .)
    NOT_EQUAL       reduce using rule 56 (aritmeticap -> SUM aritmetica .)
    LESS_THAN       reduce using rule 56 (aritmeticap -> SUM aritmetica .)
    LESS_THAN_EQUAL reduce using rule 56 (aritmeticap -> SUM aritmetica .)
    GREATER_THAN    reduce using rule 56 (aritmeticap -> SUM aritmetica .)
    GREATER_THAN_EQUAL reduce using rule 56 (aritmeticap -> SUM aritmetica .)
    AND             reduce using rule 56 (aritmeticap -> SUM aritmetica .)
    OR              reduce using rule 56 (aritmeticap -> SUM aritmetica .)
    R_SQUARE_BRACKET reduce using rule 56 (aritmeticap -> SUM aritmetica .)
    R_PARENTHESIS   reduce using rule 56 (aritmeticap -> SUM aritmetica .)
    COMMA           reduce using rule 56 (aritmeticap -> SUM aritmetica .)
    SEMICOLON       reduce using rule 56 (aritmeticap -> SUM aritmetica .)
    HASTA           reduce using rule 56 (aritmeticap -> SUM aritmetica .)
    HACER           reduce using rule 56 (aritmeticap -> SUM aritmetica .)


state 171

    (57) aritmeticap -> SUBTRACT aritmetica .

    EQUALS          reduce using rule 57 (aritmeticap -> SUBTRACT aritmetica .)
    NOT_EQUAL       reduce using rule 57 (aritmeticap -> SUBTRACT aritmetica .)
    LESS_THAN       reduce using rule 57 (aritmeticap -> SUBTRACT aritmetica .)
    LESS_THAN_EQUAL reduce using rule 57 (aritmeticap -> SUBTRACT aritmetica .)
    GREATER_THAN    reduce using rule 57 (aritmeticap -> SUBTRACT aritmetica .)
    GREATER_THAN_EQUAL reduce using rule 57 (aritmeticap -> SUBTRACT aritmetica .)
    AND             reduce using rule 57 (aritmeticap -> SUBTRACT aritmetica .)
    OR              reduce using rule 57 (aritmeticap -> SUBTRACT aritmetica .)
    R_SQUARE_BRACKET reduce using rule 57 (aritmeticap -> SUBTRACT aritmetica .)
    R_PARENTHESIS   reduce using rule 57 (aritmeticap -> SUBTRACT aritmetica .)
    COMMA           reduce using rule 57 (aritmeticap -> SUBTRACT aritmetica .)
    SEMICOLON       reduce using rule 57 (aritmeticap -> SUBTRACT aritmetica .)
    HASTA           reduce using rule 57 (aritmeticap -> SUBTRACT aritmetica .)
    HACER           reduce using rule 57 (aritmeticap -> SUBTRACT aritmetica .)


state 172

    (60) factorp -> MULTIPLY factor .

    SUM             reduce using rule 60 (factorp -> MULTIPLY factor .)
    SUBTRACT        reduce using rule 60 (factorp -> MULTIPLY factor .)
    EQUALS          reduce using rule 60 (factorp -> MULTIPLY factor .)
    NOT_EQUAL       reduce using rule 60 (factorp -> MULTIPLY factor .)
    LESS_THAN       reduce using rule 60 (factorp -> MULTIPLY factor .)
    LESS_THAN_EQUAL reduce using rule 60 (factorp -> MULTIPLY factor .)
    GREATER_THAN    reduce using rule 60 (factorp -> MULTIPLY factor .)
    GREATER_THAN_EQUAL reduce using rule 60 (factorp -> MULTIPLY factor .)
    AND             reduce using rule 60 (factorp -> MULTIPLY factor .)
    OR              reduce using rule 60 (factorp -> MULTIPLY factor .)
    R_SQUARE_BRACKET reduce using rule 60 (factorp -> MULTIPLY factor .)
    R_PARENTHESIS   reduce using rule 60 (factorp -> MULTIPLY factor .)
    COMMA           reduce using rule 60 (factorp -> MULTIPLY factor .)
    SEMICOLON       reduce using rule 60 (factorp -> MULTIPLY factor .)
    HASTA           reduce using rule 60 (factorp -> MULTIPLY factor .)
    HACER           reduce using rule 60 (factorp -> MULTIPLY factor .)


state 173

    (61) factorp -> DIVIDE factor .

    SUM             reduce using rule 61 (factorp -> DIVIDE factor .)
    SUBTRACT        reduce using rule 61 (factorp -> DIVIDE factor .)
    EQUALS          reduce using rule 61 (factorp -> DIVIDE factor .)
    NOT_EQUAL       reduce using rule 61 (factorp -> DIVIDE factor .)
    LESS_THAN       reduce using rule 61 (factorp -> DIVIDE factor .)
    LESS_THAN_EQUAL reduce using rule 61 (factorp -> DIVIDE factor .)
    GREATER_THAN    reduce using rule 61 (factorp -> DIVIDE factor .)
    GREATER_THAN_EQUAL reduce using rule 61 (factorp -> DIVIDE factor .)
    AND             reduce using rule 61 (factorp -> DIVIDE factor .)
    OR              reduce using rule 61 (factorp -> DIVIDE factor .)
    R_SQUARE_BRACKET reduce using rule 61 (factorp -> DIVIDE factor .)
    R_PARENTHESIS   reduce using rule 61 (factorp -> DIVIDE factor .)
    COMMA           reduce using rule 61 (factorp -> DIVIDE factor .)
    SEMICOLON       reduce using rule 61 (factorp -> DIVIDE factor .)
    HASTA           reduce using rule 61 (factorp -> DIVIDE factor .)
    HACER           reduce using rule 61 (factorp -> DIVIDE factor .)


state 174

    (74) llamadaFuncion -> ID L_PARENTHESIS parametro . R_PARENTHESIS

    R_PARENTHESIS   shift and go to state 187


state 175

    (73) cte -> L_PARENTHESIS expresion R_PARENTHESIS .

    DETERMINANT     reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    TRANSPOSED      reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    INVERSE         reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    MULTIPLY        reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    DIVIDE          reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    SUM             reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    SUBTRACT        reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    EQUALS          reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    LESS_THAN       reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    LESS_THAN_EQUAL reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    GREATER_THAN    reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    GREATER_THAN_EQUAL reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    AND             reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    OR              reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    R_SQUARE_BRACKET reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    COMMA           reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    SEMICOLON       reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    HASTA           reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)
    HACER           reduce using rule 73 (cte -> L_PARENTHESIS expresion R_PARENTHESIS .)


state 176

    (76) regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 76 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 76 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 76 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 76 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 76 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 76 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 76 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 76 (regresa -> REGRESA L_PARENTHESIS expresion R_PARENTHESIS SEMICOLON .)


state 177

    (77) lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 77 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 77 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 77 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 77 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 77 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 77 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 77 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 77 (lectura -> LECTURA L_PARENTHESIS lecturap R_PARENTHESIS SEMICOLON .)


state 178

    (78) lecturap -> ID dimId lecturapp .

    R_PARENTHESIS   reduce using rule 78 (lecturap -> ID dimId lecturapp .)


state 179

    (79) lecturapp -> COMMA . lecturap
    (78) lecturap -> . ID dimId lecturapp

    ID              shift and go to state 104

    lecturap                       shift and go to state 188

state 180

    (80) lecturapp -> empty .

    R_PARENTHESIS   reduce using rule 80 (lecturapp -> empty .)


state 181

    (81) escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .

    ID              reduce using rule 81 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    REGRESA         reduce using rule 81 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    LECTURA         reduce using rule 81 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    ESCRIBE         reduce using rule 81 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    SI              reduce using rule 81 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    MIENTRAS        reduce using rule 81 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    DESDE           reduce using rule 81 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)
    R_CURLY_BRACKET reduce using rule 81 (escritura -> ESCRIBE L_PARENTHESIS escriturap R_PARENTHESIS SEMICOLON .)


state 182

    (84) escriturapp -> COMMA escriturap .

    R_PARENTHESIS   reduce using rule 84 (escriturapp -> COMMA escriturap .)


state 183

    (86) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS HAZ . bloque decisionp
    (26) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 33

    bloque                         shift and go to state 189

state 184

    (89) cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ . bloque
    (26) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 33

    bloque                         shift and go to state 190

state 185

    (90) cicloNoCondicional -> DESDE ID dimId ASSIGN expresion . HASTA expresion HACER bloque

    HASTA           shift and go to state 191


state 186

    (22) parametrop -> COMMA tipo ID parametrop .

    R_PARENTHESIS   reduce using rule 22 (parametrop -> COMMA tipo ID parametrop .)


state 187

    (74) llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .

    DETERMINANT     reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    TRANSPOSED      reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    INVERSE         reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    MULTIPLY        reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    DIVIDE          reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    SUM             reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    SUBTRACT        reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    EQUALS          reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    LESS_THAN       reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    LESS_THAN_EQUAL reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    GREATER_THAN    reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    GREATER_THAN_EQUAL reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    AND             reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    OR              reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    R_SQUARE_BRACKET reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    R_PARENTHESIS   reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    COMMA           reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    SEMICOLON       reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    HASTA           reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)
    HACER           reduce using rule 74 (llamadaFuncion -> ID L_PARENTHESIS parametro R_PARENTHESIS .)


state 188

    (79) lecturapp -> COMMA lecturap .

    R_PARENTHESIS   reduce using rule 79 (lecturapp -> COMMA lecturap .)


state 189

    (86) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque . decisionp
    (87) decisionp -> . SINO bloque
    (88) decisionp -> . empty
    (91) empty -> .

    SINO            shift and go to state 193
    ID              reduce using rule 91 (empty -> .)
    REGRESA         reduce using rule 91 (empty -> .)
    LECTURA         reduce using rule 91 (empty -> .)
    ESCRIBE         reduce using rule 91 (empty -> .)
    SI              reduce using rule 91 (empty -> .)
    MIENTRAS        reduce using rule 91 (empty -> .)
    DESDE           reduce using rule 91 (empty -> .)
    R_CURLY_BRACKET reduce using rule 91 (empty -> .)

    decisionp                      shift and go to state 192
    empty                          shift and go to state 194

state 190

    (89) cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .

    ID              reduce using rule 89 (cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .)
    REGRESA         reduce using rule 89 (cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .)
    LECTURA         reduce using rule 89 (cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .)
    ESCRIBE         reduce using rule 89 (cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .)
    SI              reduce using rule 89 (cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .)
    MIENTRAS        reduce using rule 89 (cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .)
    DESDE           reduce using rule 89 (cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .)
    R_CURLY_BRACKET reduce using rule 89 (cicloCondicional -> MIENTRAS L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque .)


state 191

    (90) cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA . expresion HACER bloque
    (42) expresion -> . relacional expresionp
    (43) expresion -> . NOT relacional expresionp
    (47) relacional -> . aritmetica relacionalp
    (55) aritmetica -> . factor aritmeticap
    (59) factor -> . matriz factorp
    (63) matriz -> . cte matrizp
    (68) cte -> . CTE_INT
    (69) cte -> . CTE_FLOAT
    (70) cte -> . CTE_CHAR
    (71) cte -> . llamadaFuncion
    (72) cte -> . ID dimId
    (73) cte -> . L_PARENTHESIS expresion R_PARENTHESIS
    (74) llamadaFuncion -> . ID L_PARENTHESIS parametro R_PARENTHESIS

    NOT             shift and go to state 91
    CTE_INT         shift and go to state 96
    CTE_FLOAT       shift and go to state 97
    CTE_CHAR        shift and go to state 98
    ID              shift and go to state 100
    L_PARENTHESIS   shift and go to state 101

    expresion                      shift and go to state 195
    relacional                     shift and go to state 90
    aritmetica                     shift and go to state 92
    factor                         shift and go to state 93
    matriz                         shift and go to state 94
    cte                            shift and go to state 95
    llamadaFuncion                 shift and go to state 99

state 192

    (86) decision -> SI L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque decisionp .

    ID              reduce using rule 86 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque decisionp .)
    REGRESA         reduce using rule 86 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque decisionp .)
    LECTURA         reduce using rule 86 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque decisionp .)
    ESCRIBE         reduce using rule 86 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque decisionp .)
    SI              reduce using rule 86 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque decisionp .)
    MIENTRAS        reduce using rule 86 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque decisionp .)
    DESDE           reduce using rule 86 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque decisionp .)
    R_CURLY_BRACKET reduce using rule 86 (decision -> SI L_PARENTHESIS expresion R_PARENTHESIS HAZ bloque decisionp .)


state 193

    (87) decisionp -> SINO . bloque
    (26) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 33

    bloque                         shift and go to state 196

state 194

    (88) decisionp -> empty .

    ID              reduce using rule 88 (decisionp -> empty .)
    REGRESA         reduce using rule 88 (decisionp -> empty .)
    LECTURA         reduce using rule 88 (decisionp -> empty .)
    ESCRIBE         reduce using rule 88 (decisionp -> empty .)
    SI              reduce using rule 88 (decisionp -> empty .)
    MIENTRAS        reduce using rule 88 (decisionp -> empty .)
    DESDE           reduce using rule 88 (decisionp -> empty .)
    R_CURLY_BRACKET reduce using rule 88 (decisionp -> empty .)


state 195

    (90) cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion . HACER bloque

    HACER           shift and go to state 197


state 196

    (87) decisionp -> SINO bloque .

    ID              reduce using rule 87 (decisionp -> SINO bloque .)
    REGRESA         reduce using rule 87 (decisionp -> SINO bloque .)
    LECTURA         reduce using rule 87 (decisionp -> SINO bloque .)
    ESCRIBE         reduce using rule 87 (decisionp -> SINO bloque .)
    SI              reduce using rule 87 (decisionp -> SINO bloque .)
    MIENTRAS        reduce using rule 87 (decisionp -> SINO bloque .)
    DESDE           reduce using rule 87 (decisionp -> SINO bloque .)
    R_CURLY_BRACKET reduce using rule 87 (decisionp -> SINO bloque .)


state 197

    (90) cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER . bloque
    (26) bloque -> . L_CURLY_BRACKET bloquep R_CURLY_BRACKET

    L_CURLY_BRACKET shift and go to state 33

    bloque                         shift and go to state 198

state 198

    (90) cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque .

    ID              reduce using rule 90 (cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque .)
    REGRESA         reduce using rule 90 (cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque .)
    LECTURA         reduce using rule 90 (cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque .)
    ESCRIBE         reduce using rule 90 (cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque .)
    SI              reduce using rule 90 (cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque .)
    MIENTRAS        reduce using rule 90 (cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque .)
    DESDE           reduce using rule 90 (cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque .)
    R_CURLY_BRACKET reduce using rule 90 (cicloNoCondicional -> DESDE ID dimId ASSIGN expresion HASTA expresion HACER bloque .)

